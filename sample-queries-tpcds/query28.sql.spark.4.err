Error in query: Detected implicit cartesian product for INNER join between logical plans
Join Inner
:- Join Inner
:  :- Join Inner
:  :  :- Join Inner
:  :  :  :- Aggregate [avg(cast(ss_list_price#30 as double)) AS B1_LP#0, count(ss_list_price#30) AS B1_CNT#1L, count(distinct ss_list_price#30) AS B1_CNTD#2L]
:  :  :  :  +- Project [ss_list_price#30]
:  :  :  :     +- Filter (isnotnull(ss_quantity#28) && (((ss_quantity#28 >= 0) && (ss_quantity#28 <= 5)) && ((((ss_list_price#30 >= 11.0) && (ss_list_price#30 <= 21.0)) || ((ss_coupon_amt#37 >= 460.0) && (ss_coupon_amt#37 <= 1460.0))) || ((ss_wholesale_cost#29 >= 14.0) && (ss_wholesale_cost#29 <= 34.0)))))
:  :  :  :        +- HiveTableRelation `tpcds_text_20`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, [ss_sold_date_sk#18, ss_sold_time_sk#19, ss_item_sk#20, ss_customer_sk#21, ss_cdemo_sk#22, ss_hdemo_sk#23, ss_addr_sk#24, ss_store_sk#25, ss_promo_sk#26, ss_ticket_number#27L, ss_quantity#28, ss_wholesale_cost#29, ss_list_price#30, ss_sales_price#31, ss_ext_discount_amt#32, ss_ext_sales_price#33, ss_ext_wholesale_cost#34, ss_ext_list_price#35, ss_ext_tax#36, ss_coupon_amt#37, ss_net_paid#38, ss_net_paid_inc_tax#39, ss_net_profit#40]
:  :  :  +- Aggregate [avg(cast(ss_list_price#53 as double)) AS B2_LP#3, count(ss_list_price#53) AS B2_CNT#4L, count(distinct ss_list_price#53) AS B2_CNTD#5L]
:  :  :     +- Project [ss_list_price#53]
:  :  :        +- Filter (isnotnull(ss_quantity#51) && (((ss_quantity#51 >= 6) && (ss_quantity#51 <= 10)) && ((((ss_list_price#53 >= 91.0) && (ss_list_price#53 <= 101.0)) || ((ss_coupon_amt#60 >= 1430.0) && (ss_coupon_amt#60 <= 2430.0))) || ((ss_wholesale_cost#52 >= 32.0) && (ss_wholesale_cost#52 <= 52.0)))))
:  :  :           +- HiveTableRelation `tpcds_text_20`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, [ss_sold_date_sk#41, ss_sold_time_sk#42, ss_item_sk#43, ss_customer_sk#44, ss_cdemo_sk#45, ss_hdemo_sk#46, ss_addr_sk#47, ss_store_sk#48, ss_promo_sk#49, ss_ticket_number#50L, ss_quantity#51, ss_wholesale_cost#52, ss_list_price#53, ss_sales_price#54, ss_ext_discount_amt#55, ss_ext_sales_price#56, ss_ext_wholesale_cost#57, ss_ext_list_price#58, ss_ext_tax#59, ss_coupon_amt#60, ss_net_paid#61, ss_net_paid_inc_tax#62, ss_net_profit#63]
:  :  +- Aggregate [avg(cast(ss_list_price#76 as double)) AS B3_LP#6, count(ss_list_price#76) AS B3_CNT#7L, count(distinct ss_list_price#76) AS B3_CNTD#8L]
:  :     +- Project [ss_list_price#76]
:  :        +- Filter (isnotnull(ss_quantity#74) && (((ss_quantity#74 >= 11) && (ss_quantity#74 <= 15)) && ((((ss_list_price#76 >= 66.0) && (ss_list_price#76 <= 76.0)) || ((ss_coupon_amt#83 >= 920.0) && (ss_coupon_amt#83 <= 1920.0))) || ((ss_wholesale_cost#75 >= 4.0) && (ss_wholesale_cost#75 <= 24.0)))))
:  :           +- HiveTableRelation `tpcds_text_20`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, [ss_sold_date_sk#64, ss_sold_time_sk#65, ss_item_sk#66, ss_customer_sk#67, ss_cdemo_sk#68, ss_hdemo_sk#69, ss_addr_sk#70, ss_store_sk#71, ss_promo_sk#72, ss_ticket_number#73L, ss_quantity#74, ss_wholesale_cost#75, ss_list_price#76, ss_sales_price#77, ss_ext_discount_amt#78, ss_ext_sales_price#79, ss_ext_wholesale_cost#80, ss_ext_list_price#81, ss_ext_tax#82, ss_coupon_amt#83, ss_net_paid#84, ss_net_paid_inc_tax#85, ss_net_profit#86]
:  +- Aggregate [avg(cast(ss_list_price#99 as double)) AS B4_LP#9, count(ss_list_price#99) AS B4_CNT#10L, count(distinct ss_list_price#99) AS B4_CNTD#11L]
:     +- Project [ss_list_price#99]
:        +- Filter (isnotnull(ss_quantity#97) && (((ss_quantity#97 >= 16) && (ss_quantity#97 <= 20)) && ((((ss_list_price#99 >= 142.0) && (ss_list_price#99 <= 152.0)) || ((ss_coupon_amt#106 >= 3054.0) && (ss_coupon_amt#106 <= 4054.0))) || ((ss_wholesale_cost#98 >= 80.0) && (ss_wholesale_cost#98 <= 100.0)))))
:           +- HiveTableRelation `tpcds_text_20`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, [ss_sold_date_sk#87, ss_sold_time_sk#88, ss_item_sk#89, ss_customer_sk#90, ss_cdemo_sk#91, ss_hdemo_sk#92, ss_addr_sk#93, ss_store_sk#94, ss_promo_sk#95, ss_ticket_number#96L, ss_quantity#97, ss_wholesale_cost#98, ss_list_price#99, ss_sales_price#100, ss_ext_discount_amt#101, ss_ext_sales_price#102, ss_ext_wholesale_cost#103, ss_ext_list_price#104, ss_ext_tax#105, ss_coupon_amt#106, ss_net_paid#107, ss_net_paid_inc_tax#108, ss_net_profit#109]
+- Aggregate [avg(cast(ss_list_price#122 as double)) AS B5_LP#12, count(ss_list_price#122) AS B5_CNT#13L, count(distinct ss_list_price#122) AS B5_CNTD#14L]
   +- Project [ss_list_price#122]
      +- Filter (isnotnull(ss_quantity#120) && (((ss_quantity#120 >= 21) && (ss_quantity#120 <= 25)) && ((((ss_list_price#122 >= 135.0) && (ss_list_price#122 <= 145.0)) || ((ss_coupon_amt#129 >= 14180.0) && (ss_coupon_amt#129 <= 15180.0))) || ((ss_wholesale_cost#121 >= 38.0) && (ss_wholesale_cost#121 <= 58.0)))))
         +- HiveTableRelation `tpcds_text_20`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, [ss_sold_date_sk#110, ss_sold_time_sk#111, ss_item_sk#112, ss_customer_sk#113, ss_cdemo_sk#114, ss_hdemo_sk#115, ss_addr_sk#116, ss_store_sk#117, ss_promo_sk#118, ss_ticket_number#119L, ss_quantity#120, ss_wholesale_cost#121, ss_list_price#122, ss_sales_price#123, ss_ext_discount_amt#124, ss_ext_sales_price#125, ss_ext_wholesale_cost#126, ss_ext_list_price#127, ss_ext_tax#128, ss_coupon_amt#129, ss_net_paid#130, ss_net_paid_inc_tax#131, ss_net_profit#132]
and
Aggregate [avg(cast(ss_list_price#145 as double)) AS B6_LP#15, count(ss_list_price#145) AS B6_CNT#16L, count(distinct ss_list_price#145) AS B6_CNTD#17L]
+- Project [ss_list_price#145]
   +- Filter (isnotnull(ss_quantity#143) && (((ss_quantity#143 >= 26) && (ss_quantity#143 <= 30)) && ((((ss_list_price#145 >= 28.0) && (ss_list_price#145 <= 38.0)) || ((ss_coupon_amt#152 >= 2513.0) && (ss_coupon_amt#152 <= 3513.0))) || ((ss_wholesale_cost#144 >= 42.0) && (ss_wholesale_cost#144 <= 62.0)))))
      +- HiveTableRelation `tpcds_text_20`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, [ss_sold_date_sk#133, ss_sold_time_sk#134, ss_item_sk#135, ss_customer_sk#136, ss_cdemo_sk#137, ss_hdemo_sk#138, ss_addr_sk#139, ss_store_sk#140, ss_promo_sk#141, ss_ticket_number#142L, ss_quantity#143, ss_wholesale_cost#144, ss_list_price#145, ss_sales_price#146, ss_ext_discount_amt#147, ss_ext_sales_price#148, ss_ext_wholesale_cost#149, ss_ext_list_price#150, ss_ext_tax#151, ss_coupon_amt#152, ss_net_paid#153, ss_net_paid_inc_tax#154, ss_net_profit#155]
Join condition is missing or trivial.
Either: use the CROSS JOIN syntax to allow cartesian products between these
relations, or: enable implicit cartesian products by setting the configuration
variable spark.sql.crossJoin.enabled=true;
